"use strict";

var _interopRequire = function (obj) {
  return obj && (obj["default"] || obj);
};

module.exports = render;
var escape = _interopRequire(require("js-string-escape"));

var format = require("util").format;
var map = require("ramda").map;
var mixin = require("ramda").mixin;
var compose = require("ramda").compose;
var join = require("ramda").join;
var apply = require("ramda").apply;
var append = require("ramda").append;
var identity = require("ramda").identity;
var lPartial = require("ramda").lPartial;
var url = _interopRequire(require("url"));

var moduleOpenFormat = "angular.module(\"%s\"%s).run([\"$templateCache\", function($templateCache) {";
var entryFormat = "$templateCache.put(\"%s\", \"%s\");";
var moduleCloseFormat = "}]);";

var defaultOpts = {
  entries: [],
  module: "templates",
  standalone: false,
  prefix: ""
};

var normalizeUrl = compose(url.format, url.parse);

function openModule(module, standalone) {
  var open = format(moduleOpenFormat, module, standalone ? ", []" : "");
  return module ? append(open) : identity;
}

function closeModule(module) {
  var close = format(moduleCloseFormat);
  return module ? append(close) : identity;
}

function appendEntry(prefix, entry) {
  var path = entry.path;
  var content = entry.content;
  var prefixedPath = normalizeUrl(prefix + path);
  var line = format(entryFormat, prefixedPath, escape(content));
  return append(line);
}

function render(opts) {
  var _mixin = mixin(defaultOpts, opts);

  var entries = _mixin.entries;
  var module = _mixin.module;
  var standalone = _mixin.standalone;
  var prefix = _mixin.prefix;
  var entryOps = map(lPartial(appendEntry, prefix), entries);
  var ops = [].concat(join("\n"), closeModule(module, standalone), entryOps, openModule(module, standalone));

  return apply(compose, ops)([]);
}